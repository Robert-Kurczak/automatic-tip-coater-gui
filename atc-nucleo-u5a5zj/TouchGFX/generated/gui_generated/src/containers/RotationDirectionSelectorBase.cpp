/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/containers/RotationDirectionSelectorBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

RotationDirectionSelectorBase::RotationDirectionSelectorBase() :
    ClockwiseButtonPressedCallback(0),
    CounterClockwiseButtonPressedCallback(0),
    flexButtonCallback(this, &RotationDirectionSelectorBase::flexButtonCallbackHandler)
{
    setWidth(480);
    setHeight(800);
    directionButtonContainer.setPosition(159, 400, 162, 165);
    directionButtonShadow.setPosition(0, 0, 162, 165);
    directionButtonShadow.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    directionButtonShadow.setAlpha(50);
    directionButtonContainer.add(directionButtonShadow);

    counterClockwiseButton.setBoxWithBorderPosition(0, 0, 157, 160);
    counterClockwiseButton.setBorderSize(0);
    counterClockwiseButton.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(17, 17, 27), touchgfx::Color::getColorFromRGB(24, 24, 37), touchgfx::Color::getColorFromRGB(0, 51, 102), touchgfx::Color::getColorFromRGB(51, 102, 153));
    counterClockwiseButton.setIconBitmaps(Bitmap(BITMAP_ICON_THEME_IMAGES_IMAGE_ROTATE_LEFT_60_60_E8F6FB_SVG_ID), Bitmap(BITMAP_ICON_THEME_IMAGES_IMAGE_ROTATE_LEFT_60_60_E8F6FB_SVG_ID));
    counterClockwiseButton.setIconXY(50, 20);
    counterClockwiseButton.setText(TypedText(T___SINGLEUSE_JSQV));
    counterClockwiseButton.setTextPosition(0, 80, 157, 160);
    counterClockwiseButton.setTextColors(touchgfx::Color::getColorFromRGB(205, 214, 244), touchgfx::Color::getColorFromRGB(205, 214, 244));
    counterClockwiseButton.setVisible(false);
    counterClockwiseButton.setAction(flexButtonCallback);
    counterClockwiseButton.setPosition(0, 0, 157, 160);
    directionButtonContainer.add(counterClockwiseButton);

    clockwiseButton.setBoxWithBorderPosition(0, 0, 157, 160);
    clockwiseButton.setBorderSize(0);
    clockwiseButton.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(17, 17, 27), touchgfx::Color::getColorFromRGB(24, 24, 37), touchgfx::Color::getColorFromRGB(0, 51, 102), touchgfx::Color::getColorFromRGB(51, 102, 153));
    clockwiseButton.setIconBitmaps(Bitmap(BITMAP_ICON_THEME_IMAGES_IMAGE_ROTATE_RIGHT_60_60_E8F6FB_SVG_ID), Bitmap(BITMAP_ICON_THEME_IMAGES_IMAGE_ROTATE_RIGHT_60_60_E8F6FB_SVG_ID));
    clockwiseButton.setIconXY(50, 20);
    clockwiseButton.setText(TypedText(T___SINGLEUSE_5SAV));
    clockwiseButton.setTextPosition(0, 100, 157, 160);
    clockwiseButton.setTextColors(touchgfx::Color::getColorFromRGB(205, 214, 244), touchgfx::Color::getColorFromRGB(205, 214, 244));
    clockwiseButton.setAction(flexButtonCallback);
    clockwiseButton.setPosition(0, 0, 157, 160);
    directionButtonContainer.add(clockwiseButton);

    add(directionButtonContainer);
}

RotationDirectionSelectorBase::~RotationDirectionSelectorBase()
{

}

void RotationDirectionSelectorBase::initialize()
{

}

void RotationDirectionSelectorBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
    if (&src == &clockwiseButton)
    {
        //ClockwiseButtonPressed
        //When clockwiseButton clicked emit ClockwiseButtonPressed callback
        //Emit callback
        emitClockwiseButtonPressedCallback();
        //HideClockwiseButton
        //When clockwiseButton clicked hide clockwiseButton
        //Hide clockwiseButton
        clockwiseButton.setVisible(false);
        clockwiseButton.invalidate();
        //ShowCounterClockwiseButton
        //When clockwiseButton clicked show counterClockwiseButton
        //Show counterClockwiseButton
        counterClockwiseButton.setVisible(true);
        counterClockwiseButton.invalidate();
    }
    if (&src == &counterClockwiseButton)
    {
        //CounterClockwiseButtonPressed
        //When counterClockwiseButton clicked emit CounterClockwiseButtonPressed callback
        //Emit callback
        emitCounterClockwiseButtonPressedCallback();
        //HideCounterClockwiseButton
        //When counterClockwiseButton clicked hide counterClockwiseButton
        //Hide counterClockwiseButton
        counterClockwiseButton.setVisible(false);
        counterClockwiseButton.invalidate();
        //ShowClockwiseButton
        //When counterClockwiseButton clicked show clockwiseButton
        //Show clockwiseButton
        clockwiseButton.setVisible(true);
        clockwiseButton.invalidate();
    }
}
