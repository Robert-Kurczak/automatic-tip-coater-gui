/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/containers/ValueSelectorBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

ValueSelectorBase::ValueSelectorBase() :
    increaseButtonPressedCallback(0),
    decreaseButtonPressedCallback(0),
    flexButtonCallback(this, &ValueSelectorBase::flexButtonCallbackHandler)
{
    setWidth(480);
    setHeight(800);
    selectorContainer.setPosition(0, 320, 480, 305);
    increaseButtonContainer.setPosition(265, 180, 165, 125);
    increaseButtonShadow.setPosition(0, 0, 165, 125);
    increaseButtonShadow.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    increaseButtonShadow.setAlpha(50);
    increaseButtonContainer.add(increaseButtonShadow);

    increaseButton.setDelay(18);
    increaseButton.setInterval(6);
    increaseButton.setBoxWithBorderPosition(0, 0, 160, 120);
    increaseButton.setBorderSize(0);
    increaseButton.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(17, 17, 27), touchgfx::Color::getColorFromRGB(24, 24, 37), touchgfx::Color::getColorFromRGB(0, 51, 102), touchgfx::Color::getColorFromRGB(51, 102, 153));
    increaseButton.setIconBitmaps(Bitmap(BITMAP_ICON_THEME_IMAGES_HARDWARE_KEYBOARD_ARROW_RIGHT_60_60_E8F6FB_SVG_ID), Bitmap(BITMAP_ICON_THEME_IMAGES_HARDWARE_KEYBOARD_ARROW_RIGHT_60_60_E8F6FB_SVG_ID));
    increaseButton.setIconXY(50, 30);
    increaseButton.setAction(flexButtonCallback);
    increaseButton.setPosition(0, 0, 160, 120);
    increaseButtonContainer.add(increaseButton);

    selectorContainer.add(increaseButtonContainer);

    decreaseButtonContainer.setPosition(55, 180, 165, 125);
    decreaseButtonShadow.setPosition(0, 0, 165, 125);
    decreaseButtonShadow.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    decreaseButtonShadow.setAlpha(50);
    decreaseButtonContainer.add(decreaseButtonShadow);

    decreaseButton.setDelay(18);
    decreaseButton.setInterval(6);
    decreaseButton.setBoxWithBorderPosition(0, 0, 160, 120);
    decreaseButton.setBorderSize(0);
    decreaseButton.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(17, 17, 27), touchgfx::Color::getColorFromRGB(24, 24, 37), touchgfx::Color::getColorFromRGB(0, 51, 102), touchgfx::Color::getColorFromRGB(51, 102, 153));
    decreaseButton.setIconBitmaps(Bitmap(BITMAP_ICON_THEME_IMAGES_HARDWARE_KEYBOARD_ARROW_LEFT_60_60_E8F6FB_SVG_ID), Bitmap(BITMAP_ICON_THEME_IMAGES_HARDWARE_KEYBOARD_ARROW_LEFT_60_60_E8F6FB_SVG_ID));
    decreaseButton.setIconXY(50, 30);
    decreaseButton.setAction(flexButtonCallback);
    decreaseButton.setPosition(0, 0, 160, 120);
    decreaseButtonContainer.add(decreaseButton);

    selectorContainer.add(decreaseButtonContainer);

    displayedValueContainer.setPosition(55, 0, 375, 125);
    displayedValueShadow.setPosition(0, 0, 375, 125);
    displayedValueShadow.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    displayedValueShadow.setAlpha(50);
    displayedValueContainer.add(displayedValueShadow);

    displayedValueBackground.setPosition(0, 0, 370, 120);
    displayedValueBackground.setColor(touchgfx::Color::getColorFromRGB(17, 17, 27));
    displayedValueContainer.add(displayedValueBackground);

    displayedValue.setPosition(0, 35, 370, 50);
    displayedValue.setColor(touchgfx::Color::getColorFromRGB(205, 214, 244));
    displayedValue.setLinespacing(0);
    Unicode::snprintf(displayedValueBuffer, DISPLAYEDVALUE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_QSV8).getText());
    displayedValue.setWildcard(displayedValueBuffer);
    displayedValue.setTypedText(touchgfx::TypedText(T_DISPLAYEDVALUETEXT));
    displayedValueContainer.add(displayedValue);

    selectorContainer.add(displayedValueContainer);

    add(selectorContainer);
}

ValueSelectorBase::~ValueSelectorBase()
{

}

void ValueSelectorBase::initialize()
{

}

void ValueSelectorBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
    if (&src == &increaseButton)
    {
        //IncreaseButtonPressed
        //When increaseButton clicked emit increaseButtonPressed callback
        //Emit callback
        emitIncreaseButtonPressedCallback();
    }
    if (&src == &decreaseButton)
    {
        //DecreaseButtonPressed
        //When decreaseButton clicked emit decreaseButtonPressed callback
        //Emit callback
        emitDecreaseButtonPressedCallback();
    }
}
