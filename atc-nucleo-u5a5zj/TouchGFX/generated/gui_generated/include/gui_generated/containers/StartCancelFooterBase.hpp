/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef STARTCANCELFOOTERBASE_HPP
#define STARTCANCELFOOTERBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <touchgfx/containers/Container.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/containers/buttons/Buttons.hpp>
#include <touchgfx/EasingEquations.hpp>
#include <touchgfx/mixins/MoveAnimator.hpp>

class StartCancelFooterBase : public touchgfx::Container
{
public:
    StartCancelFooterBase();
    virtual ~StartCancelFooterBase();
    virtual void initialize();

    /*
     * Custom Trigger Callback Setters
     */
    void setStartButtonPressedCallback(touchgfx::GenericCallback<>& callback)
    {
        this->startButtonPressedCallback = &callback;
    }
    void setCancelButtonPressedCallback(touchgfx::GenericCallback<>& callback)
    {
        this->cancelButtonPressedCallback = &callback;
    }
    void setBackButtonPressedCallback(touchgfx::GenericCallback<>& callback)
    {
        this->backButtonPressedCallback = &callback;
    }

    /*
     * Custom Actions
     */
    virtual void resetState();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Custom Trigger Emitters
     */
    virtual void emitStartButtonPressedCallback()
    {
        if (startButtonPressedCallback && startButtonPressedCallback->isValid())
        {
            this->startButtonPressedCallback->execute();
        }
    }
    virtual void emitCancelButtonPressedCallback()
    {
        if (cancelButtonPressedCallback && cancelButtonPressedCallback->isValid())
        {
            this->cancelButtonPressedCallback->execute();
        }
    }
    virtual void emitBackButtonPressedCallback()
    {
        if (backButtonPressedCallback && backButtonPressedCallback->isValid())
        {
            this->backButtonPressedCallback->execute();
        }
    }

    /*
     * Member Declarations
     */
    touchgfx::MoveAnimator< touchgfx::Container > cancelButtonContainer;
    touchgfx::Box cancelButtonShadow;
    touchgfx::TextButtonStyle< touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  >  cancelButton;
    touchgfx::MoveAnimator< touchgfx::Container > startAndBackButtonsContainer;
    touchgfx::Container backButtonContainer;
    touchgfx::Box backButtonShadow;
    touchgfx::IconButtonStyle< touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  >  backButton;
    touchgfx::Container startButtonContainer;
    touchgfx::Box startButtonShadow;
    touchgfx::TextButtonStyle< touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  >  startButton;

private:

    /*
     * Custom Trigger Callback Declarations
     */
    touchgfx::GenericCallback<>* startButtonPressedCallback;
    touchgfx::GenericCallback<>* cancelButtonPressedCallback;
    touchgfx::GenericCallback<>* backButtonPressedCallback;

    /*
     * Callback Declarations
     */
    touchgfx::Callback<StartCancelFooterBase, const touchgfx::AbstractButtonContainer&> flexButtonCallback;
    touchgfx::Callback < StartCancelFooterBase, const touchgfx::MoveAnimator<touchgfx::Container>& > hideStartAndBackButtonsEndedCallback;
    touchgfx::Callback < StartCancelFooterBase, const touchgfx::MoveAnimator<touchgfx::Container>& > hideCancelButtonEndedCallback;

    /*
     * Callback Handler Declarations
     */
    void flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src);
    void hideStartAndBackButtonsEndedCallbackHandler(const touchgfx::MoveAnimator<touchgfx::Container>& comp);
    void hideCancelButtonEndedCallbackHandler(const touchgfx::MoveAnimator<touchgfx::Container>& comp);

};

#endif // STARTCANCELFOOTERBASE_HPP
