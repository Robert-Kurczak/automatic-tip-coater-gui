/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef VALUESELECTORBASE_HPP
#define VALUESELECTORBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <touchgfx/containers/Container.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/containers/buttons/Buttons.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>

class ValueSelectorBase : public touchgfx::Container
{
public:
    ValueSelectorBase();
    virtual ~ValueSelectorBase();
    virtual void initialize();

    /*
     * Custom Trigger Callback Setters
     */
    void setIncreaseButtonPressedCallback(touchgfx::GenericCallback<>& callback)
    {
        this->increaseButtonPressedCallback = &callback;
    }
    void setDecreaseButtonPressedCallback(touchgfx::GenericCallback<>& callback)
    {
        this->decreaseButtonPressedCallback = &callback;
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Custom Trigger Emitters
     */
    virtual void emitIncreaseButtonPressedCallback()
    {
        if (increaseButtonPressedCallback && increaseButtonPressedCallback->isValid())
        {
            this->increaseButtonPressedCallback->execute();
        }
    }
    virtual void emitDecreaseButtonPressedCallback()
    {
        if (decreaseButtonPressedCallback && decreaseButtonPressedCallback->isValid())
        {
            this->decreaseButtonPressedCallback->execute();
        }
    }

    /*
     * Member Declarations
     */
    touchgfx::Container selectorContainer;
    touchgfx::Container increaseButtonContainer;
    touchgfx::Box increaseButtonShadow;
    touchgfx::IconButtonStyle< touchgfx::BoxWithBorderButtonStyle< touchgfx::RepeatButtonTrigger >  >  increaseButton;
    touchgfx::Container decreaseButtonContainer;
    touchgfx::Box decreaseButtonShadow;
    touchgfx::IconButtonStyle< touchgfx::BoxWithBorderButtonStyle< touchgfx::RepeatButtonTrigger >  >  decreaseButton;
    touchgfx::Container displayedValueContainer;
    touchgfx::Box displayedValueShadow;
    touchgfx::Box displayedValueBackground;
    touchgfx::TextAreaWithOneWildcard displayedValue;

    /*
     * Wildcard Buffers
     */
    static const uint16_t DISPLAYEDVALUE_SIZE = 10;
    touchgfx::Unicode::UnicodeChar displayedValueBuffer[DISPLAYEDVALUE_SIZE];

private:

    /*
     * Custom Trigger Callback Declarations
     */
    touchgfx::GenericCallback<>* increaseButtonPressedCallback;
    touchgfx::GenericCallback<>* decreaseButtonPressedCallback;

    /*
     * Callback Declarations
     */
    touchgfx::Callback<ValueSelectorBase, const touchgfx::AbstractButtonContainer&> flexButtonCallback;

    /*
     * Callback Handler Declarations
     */
    void flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src);

};

#endif // VALUESELECTORBASE_HPP
