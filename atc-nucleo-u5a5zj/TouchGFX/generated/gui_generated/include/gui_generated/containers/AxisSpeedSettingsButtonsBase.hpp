/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef AXISSPEEDSETTINGSBUTTONSBASE_HPP
#define AXISSPEEDSETTINGSBUTTONSBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <touchgfx/containers/Container.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/containers/buttons/Buttons.hpp>

class AxisSpeedSettingsButtonsBase : public touchgfx::Container
{
public:
    AxisSpeedSettingsButtonsBase();
    virtual ~AxisSpeedSettingsButtonsBase();
    virtual void initialize();

    /*
     * Custom Trigger Callback Setters
     */
    void setStartButtonPressedCallback(touchgfx::GenericCallback<>& callback)
    {
        this->startButtonPressedCallback = &callback;
    }
    void setEndButtonPressedCallback(touchgfx::GenericCallback<>& callback)
    {
        this->endButtonPressedCallback = &callback;
    }
    void setSpeedButtonPressedCallback(touchgfx::GenericCallback<>& callback)
    {
        this->speedButtonPressedCallback = &callback;
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Custom Trigger Emitters
     */
    virtual void emitStartButtonPressedCallback()
    {
        if (startButtonPressedCallback && startButtonPressedCallback->isValid())
        {
            this->startButtonPressedCallback->execute();
        }
    }
    virtual void emitEndButtonPressedCallback()
    {
        if (endButtonPressedCallback && endButtonPressedCallback->isValid())
        {
            this->endButtonPressedCallback->execute();
        }
    }
    virtual void emitSpeedButtonPressedCallback()
    {
        if (speedButtonPressedCallback && speedButtonPressedCallback->isValid())
        {
            this->speedButtonPressedCallback->execute();
        }
    }

    /*
     * Member Declarations
     */
    touchgfx::Container buttons;
    touchgfx::Container speedButtonContainer;
    touchgfx::Box speedButtonShadow;
    touchgfx::TextButtonStyle< touchgfx::IconButtonStyle< touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  >  >  speedButton;
    touchgfx::Box speedButtonUnderline;
    touchgfx::Container endButtonContainer;
    touchgfx::Box endButtonShadow;
    touchgfx::TextButtonStyle< touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  >  endButton;
    touchgfx::Box endButtonUnderline;
    touchgfx::Container startButtonContainer;
    touchgfx::Box startButtonShadow;
    touchgfx::TextButtonStyle< touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  >  startButton;
    touchgfx::Box startButtonUnderline;
    touchgfx::Container headerContainer;
    touchgfx::Box headerShadow;
    touchgfx::Box header;

private:

    /*
     * Custom Trigger Callback Declarations
     */
    touchgfx::GenericCallback<>* startButtonPressedCallback;
    touchgfx::GenericCallback<>* endButtonPressedCallback;
    touchgfx::GenericCallback<>* speedButtonPressedCallback;

    /*
     * Callback Declarations
     */
    touchgfx::Callback<AxisSpeedSettingsButtonsBase, const touchgfx::AbstractButtonContainer&> flexButtonCallback;

    /*
     * Callback Handler Declarations
     */
    void flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src);

};

#endif // AXISSPEEDSETTINGSBUTTONSBASE_HPP
