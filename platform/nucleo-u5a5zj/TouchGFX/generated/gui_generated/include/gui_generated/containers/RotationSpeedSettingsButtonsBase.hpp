/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef ROTATIONSPEEDSETTINGSBUTTONSBASE_HPP
#define ROTATIONSPEEDSETTINGSBUTTONSBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <touchgfx/containers/Container.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/containers/buttons/Buttons.hpp>

class RotationSpeedSettingsButtonsBase : public touchgfx::Container
{
public:
    RotationSpeedSettingsButtonsBase();
    virtual ~RotationSpeedSettingsButtonsBase();
    virtual void initialize();

    /*
     * Custom Trigger Callback Setters
     */
    void setSpeedButtonPressedCallback(touchgfx::GenericCallback<>& callback)
    {
        this->speedButtonPressedCallback = &callback;
    }
    void setDirectionButtonPressedCallback(touchgfx::GenericCallback<>& callback)
    {
        this->directionButtonPressedCallback = &callback;
    }
    void setRotationTimeButtonPressedCallback(touchgfx::GenericCallback<>& callback)
    {
        this->rotationTimeButtonPressedCallback = &callback;
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Custom Trigger Emitters
     */
    virtual void emitSpeedButtonPressedCallback()
    {
        if (speedButtonPressedCallback && speedButtonPressedCallback->isValid())
        {
            this->speedButtonPressedCallback->execute();
        }
    }
    virtual void emitDirectionButtonPressedCallback()
    {
        if (directionButtonPressedCallback && directionButtonPressedCallback->isValid())
        {
            this->directionButtonPressedCallback->execute();
        }
    }
    virtual void emitRotationTimeButtonPressedCallback()
    {
        if (rotationTimeButtonPressedCallback && rotationTimeButtonPressedCallback->isValid())
        {
            this->rotationTimeButtonPressedCallback->execute();
        }
    }

    /*
     * Member Declarations
     */
    touchgfx::Container buttons;
    touchgfx::Container rotationTimeButtonContainer;
    touchgfx::Box rotationTimeButtonShadow;
    touchgfx::TextButtonStyle< touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  >  rotationTimeButton;
    touchgfx::Box rotationTimeButtonUnderline;
    touchgfx::Container directionButtonContainer;
    touchgfx::Box directionButtonShadow;
    touchgfx::TextButtonStyle< touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  >  directionButton;
    touchgfx::Box directionButtonUnderline;
    touchgfx::Container speedButtonContainer;
    touchgfx::Box speedButtonShadow;
    touchgfx::TextButtonStyle< touchgfx::IconButtonStyle< touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  >  >  speedButton;
    touchgfx::Box speedButtonUnderline;
    touchgfx::Container headerContainer;
    touchgfx::Box headerShadow;
    touchgfx::Box header;

private:

    /*
     * Custom Trigger Callback Declarations
     */
    touchgfx::GenericCallback<>* speedButtonPressedCallback;
    touchgfx::GenericCallback<>* directionButtonPressedCallback;
    touchgfx::GenericCallback<>* rotationTimeButtonPressedCallback;

    /*
     * Callback Declarations
     */
    touchgfx::Callback<RotationSpeedSettingsButtonsBase, const touchgfx::AbstractButtonContainer&> flexButtonCallback;

    /*
     * Callback Handler Declarations
     */
    void flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src);

};

#endif // ROTATIONSPEEDSETTINGSBUTTONSBASE_HPP
