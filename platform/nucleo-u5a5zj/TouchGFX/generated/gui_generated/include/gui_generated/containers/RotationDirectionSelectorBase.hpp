/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef ROTATIONDIRECTIONSELECTORBASE_HPP
#define ROTATIONDIRECTIONSELECTORBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <touchgfx/containers/Container.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/containers/buttons/Buttons.hpp>

class RotationDirectionSelectorBase : public touchgfx::Container
{
public:
    RotationDirectionSelectorBase();
    virtual ~RotationDirectionSelectorBase();
    virtual void initialize();

    /*
     * Custom Trigger Callback Setters
     */
    void setClockwiseButtonPressedCallback(touchgfx::GenericCallback<>& callback)
    {
        this->ClockwiseButtonPressedCallback = &callback;
    }
    void setCounterClockwiseButtonPressedCallback(touchgfx::GenericCallback<>& callback)
    {
        this->CounterClockwiseButtonPressedCallback = &callback;
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Custom Trigger Emitters
     */
    virtual void emitClockwiseButtonPressedCallback()
    {
        if (ClockwiseButtonPressedCallback && ClockwiseButtonPressedCallback->isValid())
        {
            this->ClockwiseButtonPressedCallback->execute();
        }
    }
    virtual void emitCounterClockwiseButtonPressedCallback()
    {
        if (CounterClockwiseButtonPressedCallback && CounterClockwiseButtonPressedCallback->isValid())
        {
            this->CounterClockwiseButtonPressedCallback->execute();
        }
    }

    /*
     * Member Declarations
     */
    touchgfx::Container directionButtonContainer;
    touchgfx::Box directionButtonShadow;
    touchgfx::TextButtonStyle< touchgfx::IconButtonStyle< touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  >  >  counterClockwiseButton;
    touchgfx::TextButtonStyle< touchgfx::IconButtonStyle< touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  >  >  clockwiseButton;

private:

    /*
     * Custom Trigger Callback Declarations
     */
    touchgfx::GenericCallback<>* ClockwiseButtonPressedCallback;
    touchgfx::GenericCallback<>* CounterClockwiseButtonPressedCallback;

    /*
     * Callback Declarations
     */
    touchgfx::Callback<RotationDirectionSelectorBase, const touchgfx::AbstractButtonContainer&> flexButtonCallback;

    /*
     * Callback Handler Declarations
     */
    void flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src);

};

#endif // ROTATIONDIRECTIONSELECTORBASE_HPP
