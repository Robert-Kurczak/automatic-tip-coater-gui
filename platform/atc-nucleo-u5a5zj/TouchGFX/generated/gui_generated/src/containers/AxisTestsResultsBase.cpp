/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/containers/AxisTestsResultsBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>

AxisTestsResultsBase::AxisTestsResultsBase()
{
    setWidth(480);
    setHeight(800);
    resultsContainer.setPosition(50, 270, 385, 265);
    resultsBackgroundShadow.setPosition(0, 0, 385, 265);
    resultsBackgroundShadow.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    resultsBackgroundShadow.setAlpha(50);
    resultsContainer.add(resultsBackgroundShadow);

    resultsBackground.setPosition(0, 0, 380, 260);
    resultsBackground.setColor(touchgfx::Color::getColorFromRGB(17, 17, 27));
    resultsContainer.add(resultsBackground);

    resultsList.setXY(20, 20);
    resultsList.setDirection(touchgfx::SOUTH);
    startLimitSwitchResult.setWidth(340);
    startLimitSwitchResult.setHeight(60);
    startLimitSwitchResultLabel.setPosition(0, 15, 215, 30);
    startLimitSwitchResultLabel.setColor(touchgfx::Color::getColorFromRGB(205, 214, 244));
    startLimitSwitchResultLabel.setLinespacing(1);
    startLimitSwitchResultLabel.setTypedText(touchgfx::TypedText(T___SINGLEUSE_H811));
    startLimitSwitchResult.add(startLimitSwitchResultLabel);

    startLimitSwitchResultIcon.setXY(280, 0);
    startLimitSwitchResult.add(startLimitSwitchResultIcon);

    resultsList.add(startLimitSwitchResult);

    divider_1.setWidth(340);
    divider_1.setHeight(20);
    resultsList.add(divider_1);

    endLimitSwitchResult.setWidth(340);
    endLimitSwitchResult.setHeight(60);
    endLimitSwitchResultLabel.setPosition(0, 15, 215, 30);
    endLimitSwitchResultLabel.setColor(touchgfx::Color::getColorFromRGB(205, 214, 244));
    endLimitSwitchResultLabel.setLinespacing(1);
    endLimitSwitchResultLabel.setTypedText(touchgfx::TypedText(T___SINGLEUSE_WV80));
    endLimitSwitchResult.add(endLimitSwitchResultLabel);

    endLimitSwitchResultIcon.setXY(280, 0);
    endLimitSwitchResult.add(endLimitSwitchResultIcon);

    resultsList.add(endLimitSwitchResult);

    divider.setWidth(340);
    divider.setHeight(20);
    resultsList.add(divider);

    motorDriverResult.setWidth(340);
    motorDriverResult.setHeight(60);
    motorDriverResultLabel.setPosition(0, 15, 215, 30);
    motorDriverResultLabel.setColor(touchgfx::Color::getColorFromRGB(205, 214, 244));
    motorDriverResultLabel.setLinespacing(1);
    motorDriverResultLabel.setTypedText(touchgfx::TypedText(T___SINGLEUSE_IEQ1));
    motorDriverResult.add(motorDriverResultLabel);

    motorDriverResultIcon.setXY(280, 0);
    motorDriverResult.add(motorDriverResultIcon);

    resultsList.add(motorDriverResult);

    resultsContainer.add(resultsList);

    add(resultsContainer);
}

AxisTestsResultsBase::~AxisTestsResultsBase()
{

}

void AxisTestsResultsBase::initialize()
{
    startLimitSwitchResultIcon.initialize();
    endLimitSwitchResultIcon.initialize();
    motorDriverResultIcon.initialize();
}

void AxisTestsResultsBase::setLoadingIcons()
{
    //SetLoadingIcons
    //When setLoadingIcons is called execute C++ code
    //Execute C++ code
    startLimitSwitchResultIcon.setLoadingIcon();
    endLimitSwitchResultIcon.setLoadingIcon();
    motorDriverResultIcon.setLoadingIcon();
}

void AxisTestsResultsBase::setStartLimitSwitchSuccess()
{
    //SetStartLimitSwitchSuccess
    //When setStartLimitSwitchSuccess is called call setSuccessIcon on startLimitSwitchResultIcon
    //Call setSuccessIcon
    startLimitSwitchResultIcon.setSuccessIcon();
}

void AxisTestsResultsBase::setStartLimitSwitchError()
{
    //SetStartLimitSwitchError
    //When setStartLimitSwitchError is called call setErrorIcon on startLimitSwitchResultIcon
    //Call setErrorIcon
    startLimitSwitchResultIcon.setErrorIcon();
}

void AxisTestsResultsBase::setEndLimitSwitchSuccess()
{
    //SetEndLimitSwitchSuccess
    //When setEndLimitSwitchSuccess is called call setSuccessIcon on endLimitSwitchResultIcon
    //Call setSuccessIcon
    endLimitSwitchResultIcon.setSuccessIcon();
}

void AxisTestsResultsBase::setEndLimitSwitchError()
{
    //SetEndLimitSwitchError
    //When setEndLimitSwitchError is called call setErrorIcon on endLimitSwitchResultIcon
    //Call setErrorIcon
    endLimitSwitchResultIcon.setErrorIcon();
}

void AxisTestsResultsBase::setMotorDriverSuccess()
{
    //SetMotorDriverSuccess
    //When setMotorDriverSuccess is called call setSuccessIcon on motorDriverResultIcon
    //Call setSuccessIcon
    motorDriverResultIcon.setSuccessIcon();
}

void AxisTestsResultsBase::setMotorDriverError()
{
    //SetMotorDriverError
    //When setMotorDriverError is called call setErrorIcon on motorDriverResultIcon
    //Call setErrorIcon
    motorDriverResultIcon.setErrorIcon();
}
