/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/rotationtimescreen_screen/RotationTimeScreenViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>

RotationTimeScreenViewBase::RotationTimeScreenViewBase() :
    timeSelectorIncreaseButtonPressedCallback(this, &RotationTimeScreenViewBase::timeSelectorIncreaseButtonPressedCallbackHandler),
    timeSelectorDecreaseButtonPressedCallback(this, &RotationTimeScreenViewBase::timeSelectorDecreaseButtonPressedCallbackHandler),
    settingsFooterSaveButtonPressedCallback(this, &RotationTimeScreenViewBase::settingsFooterSaveButtonPressedCallbackHandler),
    rotationTimeSettingsButtonsSpeedButtonPressedCallback(this, &RotationTimeScreenViewBase::rotationTimeSettingsButtonsSpeedButtonPressedCallbackHandler),
    rotationTimeSettingsButtonsDirectionButtonPressedCallback(this, &RotationTimeScreenViewBase::rotationTimeSettingsButtonsDirectionButtonPressedCallbackHandler)
{
    __background.setPosition(0, 0, 480, 800);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(__background);

    background.setPosition(0, 0, 480, 800);
    background.setColor(touchgfx::Color::getColorFromRGB(30, 30, 46));
    add(background);

    settingsFooter.setXY(0, 675);
    settingsFooter.setSaveButtonPressedCallback(settingsFooterSaveButtonPressedCallback);
    add(settingsFooter);

    timeSelector.setXY(0, 0);
    timeSelector.setIncreaseButtonPressedCallback(timeSelectorIncreaseButtonPressedCallback);
    timeSelector.setDecreaseButtonPressedCallback(timeSelectorDecreaseButtonPressedCallback);
    add(timeSelector);

    displayedValueUnderline.setPosition(55, 435, 370, 5);
    displayedValueUnderline.setColor(touchgfx::Color::getColorFromRGB(166, 227, 161));
    add(displayedValueUnderline);

    rotationTimeSettingsButtons.setXY(0, 0);
    rotationTimeSettingsButtons.setSpeedButtonPressedCallback(rotationTimeSettingsButtonsSpeedButtonPressedCallback);
    rotationTimeSettingsButtons.setDirectionButtonPressedCallback(rotationTimeSettingsButtonsDirectionButtonPressedCallback);
    add(rotationTimeSettingsButtons);

    units.setPosition(240, 363, 173, 35);
    units.setColor(touchgfx::Color::getColorFromRGB(205, 214, 244));
    units.setLinespacing(1);
    units.setTypedText(touchgfx::TypedText(T___SINGLEUSE_P12O));
    add(units);

    submenuName.setXY(188, 25);
    submenuName.setColor(touchgfx::Color::getColorFromRGB(205, 214, 244));
    submenuName.setLinespacing(0);
    submenuName.setTypedText(touchgfx::TypedText(T___SINGLEUSE_XVKS));
    add(submenuName);
}

RotationTimeScreenViewBase::~RotationTimeScreenViewBase()
{

}

void RotationTimeScreenViewBase::setupScreen()
{
    settingsFooter.initialize();
    timeSelector.initialize();
    rotationTimeSettingsButtons.initialize();
}

void RotationTimeScreenViewBase::timeSelectorIncreaseButtonPressedCallbackHandler()
{
    //IncreaseButtonPressed
    //When timeSelector increaseButtonPressed call virtual function
    //Call increaseButtonPressed
    increaseButtonPressed();
}

void RotationTimeScreenViewBase::timeSelectorDecreaseButtonPressedCallbackHandler()
{
    //DecreaseButtonPressed
    //When timeSelector decreaseButtonPressed call virtual function
    //Call decreaseButtonPressed
    decreaseButtonPressed();
}

void RotationTimeScreenViewBase::settingsFooterSaveButtonPressedCallbackHandler()
{
    //SaveButtonPressed
    //When settingsFooter saveButtonPressed call virtual function
    //Call saveButtonPressed
    saveButtonPressed();
}

void RotationTimeScreenViewBase::rotationTimeSettingsButtonsSpeedButtonPressedCallbackHandler()
{
    //GoToRotationDirection
    //When rotationTimeSettingsButtons speedButtonPressed change screen to RotationSpeedScreen
    //Go to RotationSpeedScreen with no screen transition
    application().gotoRotationSpeedScreenScreenNoTransition();
}

void RotationTimeScreenViewBase::rotationTimeSettingsButtonsDirectionButtonPressedCallbackHandler()
{
    //GoToRotationTime
    //When rotationTimeSettingsButtons directionButtonPressed change screen to RotationDirectionScreen
    //Go to RotationDirectionScreen with no screen transition
    application().gotoRotationDirectionScreenScreenNoTransition();
}
